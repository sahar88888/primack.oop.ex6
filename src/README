ravehshulman
saharprimack


=============================
=      File description     =
=============================
(filename for each file and a 2-3 rows description)

Code_elements package:
a package containing all classes that represent elements that can be in a code - such as a variable decleration, a
method, a condition, etc.

    Code_element.java:
    The main class in the hierarchy. It's main methods are:
     CreateFromLine, which - given a line of code, generates a matching code element
     isLegal: a method that is unique for each codeElement type, in which the

=============================
=          Design           =
=============================

we wanted to go for maximum modularity here because we very easily could want to have another filter,
therefore we made sure to keep everything modular.
all filters seperate but the same type, same for exceptions(errors.)

=============================
=  Implementation details   =
=============================
2 example regexes:

=============================
=    Answers to questions   =
=============================
we had the exceptions extend a father exception class errortype2, and that way they all could be handled the same.

we wrapped the files in a file wrapper to allow us to give them attributes we wanted, and to hold on to their information.

We sorted the files by giving each type group a Comparator that compares according to the desired arrtibute,
(size,type or abs), and than used java's built-in functions for sorting collections with a given comparator.